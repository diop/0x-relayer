{"id":"../../node_modules/jsonschema/lib/scan.js","dependencies":[{"name":"/Users/fodediop/dev/backend/0x-starter-project/package.json","includedInParent":true,"mtime":1541472665906},{"name":"/Users/fodediop/dev/backend/0x-starter-project/node_modules/jsonschema/package.json","includedInParent":true,"mtime":1541472829432},{"name":"url","loc":{"line":2,"column":21},"parent":"/Users/fodediop/dev/backend/0x-starter-project/node_modules/jsonschema/lib/scan.js","resolved":"/Users/fodediop/dev/backend/0x-starter-project/node_modules/url/url.js"},{"name":"./helpers","loc":{"line":3,"column":22},"parent":"/Users/fodediop/dev/backend/0x-starter-project/node_modules/jsonschema/lib/scan.js","resolved":"/Users/fodediop/dev/backend/0x-starter-project/node_modules/jsonschema/lib/helpers.js"}],"generated":{"js":"\nvar urilib = require('url');\nvar helpers = require('./helpers');\n\nmodule.exports.SchemaScanResult = SchemaScanResult;\nfunction SchemaScanResult(found, ref){\n  this.id = found;\n  this.ref = ref;\n}\n\n/**\n * Adds a schema with a certain urn to the Validator instance.\n * @param string uri\n * @param object schema\n * @return {Object}\n */\nmodule.exports.scan = function scan(base, schema){\n  function scanSchema(baseuri, schema){\n    if(!schema || typeof schema!='object') return;\n    // Mark all referenced schemas so we can tell later which schemas are referred to, but never defined\n    if(schema.$ref){\n      var resolvedUri = urilib.resolve(baseuri, schema.$ref);\n      ref[resolvedUri] = ref[resolvedUri] ? ref[resolvedUri]+1 : 0;\n      return;\n    }\n    var ourBase = schema.id ? urilib.resolve(baseuri, schema.id) : baseuri;\n    if (ourBase) {\n      // If there's no fragment, append an empty one\n      if(ourBase.indexOf('#')<0) ourBase += '#';\n      if(found[ourBase]){\n        if(!helpers.deepCompareStrict(found[ourBase], schema)){\n          throw new Error('Schema <'+schema+'> already exists with different definition');\n        }\n        return found[ourBase];\n      }\n      found[ourBase] = schema;\n      // strip trailing fragment\n      if(ourBase[ourBase.length-1]=='#'){\n        found[ourBase.substring(0, ourBase.length-1)] = schema;\n      }\n    }\n    scanArray(ourBase+'/items', ((schema.items instanceof Array)?schema.items:[schema.items]));\n    scanArray(ourBase+'/extends', ((schema.extends instanceof Array)?schema.extends:[schema.extends]));\n    scanSchema(ourBase+'/additionalItems', schema.additionalItems);\n    scanObject(ourBase+'/properties', schema.properties);\n    scanSchema(ourBase+'/additionalProperties', schema.additionalProperties);\n    scanObject(ourBase+'/definitions', schema.definitions);\n    scanObject(ourBase+'/patternProperties', schema.patternProperties);\n    scanObject(ourBase+'/dependencies', schema.dependencies);\n    scanArray(ourBase+'/disallow', schema.disallow);\n    scanArray(ourBase+'/allOf', schema.allOf);\n    scanArray(ourBase+'/anyOf', schema.anyOf);\n    scanArray(ourBase+'/oneOf', schema.oneOf);\n    scanSchema(ourBase+'/not', schema.not);\n  }\n  function scanArray(baseuri, schemas){\n    if(!(schemas instanceof Array)) return;\n    for(var i=0; i<schemas.length; i++){\n      scanSchema(baseuri+'/'+i, schemas[i]);\n    }\n  }\n  function scanObject(baseuri, schemas){\n    if(!schemas || typeof schemas!='object') return;\n    for(var p in schemas){\n      scanSchema(baseuri+'/'+p, schemas[p]);\n    }\n  }\n\n  var found = {};\n  var ref = {};\n  var schemaUri = base;\n  scanSchema(base, schema);\n  return new SchemaScanResult(found, ref);\n}\n","map":{"mappings":[{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/jsonschema/lib/scan.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}}],"sources":{"../../node_modules/jsonschema/lib/scan.js":"\nvar urilib = require('url');\nvar helpers = require('./helpers');\n\nmodule.exports.SchemaScanResult = SchemaScanResult;\nfunction SchemaScanResult(found, ref){\n  this.id = found;\n  this.ref = ref;\n}\n\n/**\n * Adds a schema with a certain urn to the Validator instance.\n * @param string uri\n * @param object schema\n * @return {Object}\n */\nmodule.exports.scan = function scan(base, schema){\n  function scanSchema(baseuri, schema){\n    if(!schema || typeof schema!='object') return;\n    // Mark all referenced schemas so we can tell later which schemas are referred to, but never defined\n    if(schema.$ref){\n      var resolvedUri = urilib.resolve(baseuri, schema.$ref);\n      ref[resolvedUri] = ref[resolvedUri] ? ref[resolvedUri]+1 : 0;\n      return;\n    }\n    var ourBase = schema.id ? urilib.resolve(baseuri, schema.id) : baseuri;\n    if (ourBase) {\n      // If there's no fragment, append an empty one\n      if(ourBase.indexOf('#')<0) ourBase += '#';\n      if(found[ourBase]){\n        if(!helpers.deepCompareStrict(found[ourBase], schema)){\n          throw new Error('Schema <'+schema+'> already exists with different definition');\n        }\n        return found[ourBase];\n      }\n      found[ourBase] = schema;\n      // strip trailing fragment\n      if(ourBase[ourBase.length-1]=='#'){\n        found[ourBase.substring(0, ourBase.length-1)] = schema;\n      }\n    }\n    scanArray(ourBase+'/items', ((schema.items instanceof Array)?schema.items:[schema.items]));\n    scanArray(ourBase+'/extends', ((schema.extends instanceof Array)?schema.extends:[schema.extends]));\n    scanSchema(ourBase+'/additionalItems', schema.additionalItems);\n    scanObject(ourBase+'/properties', schema.properties);\n    scanSchema(ourBase+'/additionalProperties', schema.additionalProperties);\n    scanObject(ourBase+'/definitions', schema.definitions);\n    scanObject(ourBase+'/patternProperties', schema.patternProperties);\n    scanObject(ourBase+'/dependencies', schema.dependencies);\n    scanArray(ourBase+'/disallow', schema.disallow);\n    scanArray(ourBase+'/allOf', schema.allOf);\n    scanArray(ourBase+'/anyOf', schema.anyOf);\n    scanArray(ourBase+'/oneOf', schema.oneOf);\n    scanSchema(ourBase+'/not', schema.not);\n  }\n  function scanArray(baseuri, schemas){\n    if(!(schemas instanceof Array)) return;\n    for(var i=0; i<schemas.length; i++){\n      scanSchema(baseuri+'/'+i, schemas[i]);\n    }\n  }\n  function scanObject(baseuri, schemas){\n    if(!schemas || typeof schemas!='object') return;\n    for(var p in schemas){\n      scanSchema(baseuri+'/'+p, schemas[p]);\n    }\n  }\n\n  var found = {};\n  var ref = {};\n  var schemaUri = base;\n  scanSchema(base, schema);\n  return new SchemaScanResult(found, ref);\n}\n"},"lineCount":75}},"hash":"74e121371f61612f2e2d8e8e60d9a8c0","cacheData":{"env":{}}}